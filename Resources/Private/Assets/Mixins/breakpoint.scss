@import "assertChecks";

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
//

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
) !default;
@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints);

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> break-next(sm)
//    md
//    >> break-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> break-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
//    >> break-next(500px)
//    501px

@function break-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  @if type-of($name) == "number" {
    @return $name + 1;
  } @else {
    $n: index($breakpoint-names, $name);
    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
}

// Name of the previous breakpoint, or null for the first breakpoint.
//
//    >> break-prev(md)
//    sm
//    >> break-prev(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    xs
//    >> break-prev(md, $breakpoint-names: (xs sm md lg xl))
//    sm
//    >> break-prev(500px)
//    499px
//    >> break-prev(0px)
//    0px

@function break-prev($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  @if type-of($name) == "number" {
    @if $name >= 1 {
      @return $name - 1;
    } @else {
      @return $name;
    }
  } @else {
    $n: index($breakpoint-names, $name);
    @if ($n == 1) {
      @return null;
    }
    @return if($n != null and $n <= length($breakpoint-names), nth($breakpoint-names, $n - 1), null);
  }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> break-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function break-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 1.
//
//    >> break-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function break-max($name, $breakpoints: $grid-breakpoints) {
  $next: break-next($name, $breakpoints);
  @return if($next, break-min($next, $breakpoints) - 1px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> break-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> break-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function break-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(break-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-break-portrait {
  @media (orientation: portrait) {
    @content;
  }
}

@mixin media-break-landscape {
  @media (orientation: landscape) {
    @content;
  }
}

@mixin media-break-retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
    @content;
  }
}

@mixin media-break-up($name, $breakpoints: $grid-breakpoints) {
  $min: $name;

  @if type-of($name) != "number" {
    $min: break-min($name, $breakpoints);
  }

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-break-down($name, $breakpoints: $grid-breakpoints) {
  $max: $name;

  @if type-of($name) != "number" {
    $max: break-max($name, $breakpoints);
  }

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-break-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: $lower;
  $max: $upper;

  @if type-of($lower) != "number" {
    $min: break-min($lower, $breakpoints);
  }
  @if type-of($upper) != "number" {
    $max: break-max($upper, $breakpoints);
  }

  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin media-break-only($name, $breakpoints: $grid-breakpoints) {
  $min: break-min($name, $breakpoints);
  $max: break-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-break-up($name);
  } @else if $min == null {
    @include media-break-down($name);
  }
}

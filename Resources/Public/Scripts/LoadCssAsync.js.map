{"version":3,"sources":["Resources/Private/Assets/Scripts/loadCssAsync.js"],"names":["w","loadCSS","rp","relpreload","support","ret","document","createElement","relList","supports","e","bindMediaToggle","link","finalMedia","media","enableStylesheet","addEventListener","attachEvent","rel","poly","links","getElementsByTagName","i","length","getAttribute","setAttribute","run","setInterval","clearInterval","window"],"mappings":";;;;;0BAMA,SAAUA,GAIDA,EAAEC,YACDA,QAAU,kBAGZC,EAAMD,QAAQE,WAAa,QAG5BC,QAAW,eACNC,QAEML,EAAEM,SAASC,cAAc,QAAQC,QAAQC,SAAS,WAC1D,MAAOC,MACC,SAEH,kBACIL,GARD,KAcXM,gBAAkB,SAASC,OAEtBC,EAAaD,EAAKE,OAAS,eAEtBC,MACAD,MAAQD,EAIbD,EAAKI,mBACAA,iBAAiB,OAAQD,GACvBH,EAAKK,eACPA,YAAY,SAAUF,cAKpB,aACFG,IAAM,eACNJ,MAAQ,sBAINC,EAAkB,QAI9BI,KAAO,eAEFjB,EAAGE,kBAGHgB,EAAQpB,EAAEM,SAASe,qBAAqB,QACnCC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,KAC/BV,EAAOQ,EAAME,GAGA,YAAbV,EAAKM,KACuB,UAA5BN,EAAKY,aAAa,OACjBZ,EAAKY,aAAa,oBAGdC,aAAa,gBAAgB,KAE/Bd,gBAAgBC,OAM1BV,EAAGE,UAAW,GAEZe,WAGCO,EAAM1B,EAAE2B,YAAYzB,EAAGiB,KAAM,KAC7BnB,EAAEgB,mBACAA,iBAAiB,OAAQ,aACpBG,SACDS,cAAcF,KAEb1B,EAAEiB,eACPA,YAAY,SAAU,aACjBE,SACDS,cAAcF,MAzFhC,CA6FGG","file":"LoadCssAsync.js","sourcesContent":["/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */\n/* This file is meant as a standalone workflow for\n- testing support for link[rel=preload]\n- enabling async CSS loading in browsers that do not support rel=preload\n- applying rel preload css once loaded, whether supported or not.\n*/\n(function(w) {\n    \"use strict\";\n\n    // rel=preload support test\n    if (!w.loadCSS) {\n        w.loadCSS = function() {};\n    }\n    // define on the loadCSS obj\n    var rp = (loadCSS.relpreload = {});\n    // rel=preload feature support test\n    // runs once and returns a function for compat purposes\n    rp.support = (function() {\n        var ret;\n        try {\n            ret = w.document.createElement(\"link\").relList.supports(\"preload\");\n        } catch (e) {\n            ret = false;\n        }\n        return function() {\n            return ret;\n        };\n    })();\n\n    // if preload isn't supported, get an asynchronous load by using a non-matching media attribute\n    // then change that media back to its intended value on load\n    rp.bindMediaToggle = function(link) {\n        // remember existing media attr for ultimate state, or default to 'all'\n        var finalMedia = link.media || \"all\";\n\n        function enableStylesheet() {\n            link.media = finalMedia;\n        }\n\n        // bind load handlers to enable media\n        if (link.addEventListener) {\n            link.addEventListener(\"load\", enableStylesheet);\n        } else if (link.attachEvent) {\n            link.attachEvent(\"onload\", enableStylesheet);\n        }\n\n        // Set rel and non-applicable media type to start an async request\n        // note: timeout allows this to happen async to let rendering continue in IE\n        setTimeout(function() {\n            link.rel = \"stylesheet\";\n            link.media = \"only x\";\n        });\n        // also enable media after 3 seconds,\n        // which will catch very old browsers (android 2.x, old firefox) that don't support onload on link\n        setTimeout(enableStylesheet, 3000);\n    };\n\n    // loop through link elements in DOM\n    rp.poly = function() {\n        // double check this to prevent external calls from running\n        if (rp.support()) {\n            return;\n        }\n        var links = w.document.getElementsByTagName(\"link\");\n        for (var i = 0; i < links.length; i++) {\n            var link = links[i];\n            // qualify links to those with rel=preload and as=style attrs\n            if (\n                link.rel === \"preload\" &&\n                link.getAttribute(\"as\") === \"style\" &&\n                !link.getAttribute(\"data-loadcss\")\n            ) {\n                // prevent rerunning on link\n                link.setAttribute(\"data-loadcss\", true);\n                // bind listeners to toggle media back\n                rp.bindMediaToggle(link);\n            }\n        }\n    };\n\n    // if unsupported, run the polyfill\n    if (!rp.support()) {\n        // run once at least\n        rp.poly();\n\n        // rerun poly on an interval until onload\n        var run = w.setInterval(rp.poly, 500);\n        if (w.addEventListener) {\n            w.addEventListener(\"load\", function() {\n                rp.poly();\n                w.clearInterval(run);\n            });\n        } else if (w.attachEvent) {\n            w.attachEvent(\"onload\", function() {\n                rp.poly();\n                w.clearInterval(run);\n            });\n        }\n    }\n})(window);\n"]}